/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.datamigrationapplication;

import com.mycompany.datamigrationapplication.constants.Constants;
import java.sql.*;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
/**
 *
 * @author jainr001
 */

enum Dbms {
    ORACLE, MySQL, MS_SQL_SERVER
}

public class MigrationFrame extends javax.swing.JFrame {
    /* Custom Variables */
    
    String dbmsList[] = new String[]{"Oracle", "MySQL", "Microsoft SQL Server"};
    
    // Source Database Details
//    private Integer sourceDbmsIndex = null;
    private String sourceDbms = null;
    private int sourcePortNo = 0;
    private String sourceHostname = null;
    private String sourceUsername = null;
    private String sourcePassword = null;
    private String sourceDatabasename = null;
    // Destination Database Details
    private String destDbms = null;
    private int destPortNo = 0;
    private String destHostname = null;
    private String destUsername = null;
    private String destPassword = null;
    private String destDatabasename = null;
    
    // Database Connection Objects
    // For Source
    Connection sourceConn = null;
    PreparedStatement sourceStmt = null;
    ResultSet sourceResultSet = null;
    // For Destination
    Connection destConn = null;
    PreparedStatement destStmt = null;
    
    /* Constants */
    
    /**
     * Creates new form MigrationFrame
     */
    public MigrationFrame() {
        System.out.println("Constructor called.");
        initComponents();
        // Constructor code
        fillDbmsCombobox(cmbSourceDbms);
        fillDbmsCombobox(cmbDestDbms);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSource = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cmbSourceDbms = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnTestSourceConnection = new javax.swing.JButton();
        txtSourceUsername = new javax.swing.JTextField();
        txtSourceDatabaseName = new javax.swing.JTextField();
        txtSourcePassword = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();
        txtSourceHostname = new javax.swing.JTextField();
        txtSourcePortNo = new javax.swing.JTextField();
        btnFetchSourceTables = new javax.swing.JButton();
        pnlDestination = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        btnTestDestConnection = new javax.swing.JButton();
        chkCreateDatabase = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cmbDestDbms = new javax.swing.JComboBox<>();
        txtDestPortNo = new javax.swing.JTextField();
        txtDestHostname = new javax.swing.JTextField();
        txtDestUsername = new javax.swing.JTextField();
        txtDestDatabaseName = new javax.swing.JTextField();
        txtDestPassword = new javax.swing.JPasswordField();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        chkDropTables = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Data Migration Application");
        setAutoRequestFocus(false);
        setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        setPreferredSize(new java.awt.Dimension(1280, 768));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlSource.setBackground(new java.awt.Color(204, 255, 204));
        pnlSource.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Source DBMS");

        cmbSourceDbms.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbSourceDbms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSourceDbmsActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Hostname");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Username");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Password");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Database name");

        btnTestSourceConnection.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnTestSourceConnection.setText("Test Connection");
        btnTestSourceConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestSourceConnectionActionPerformed(evt);
            }
        });

        txtSourceUsername.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtSourceUsername.setText("root");

        txtSourceDatabaseName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtSourceDatabaseName.setText("studentdb");

        txtSourcePassword.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtSourcePassword.setText("elephant");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Port Number");

        txtSourceHostname.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtSourceHostname.setText("localhost");

        txtSourcePortNo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnFetchSourceTables.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnFetchSourceTables.setText("Fetch Tables");
        btnFetchSourceTables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFetchSourceTablesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSourceLayout = new javax.swing.GroupLayout(pnlSource);
        pnlSource.setLayout(pnlSourceLayout);
        pnlSourceLayout.setHorizontalGroup(
            pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSourceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlSourceLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSourceDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlSourceLayout.createSequentialGroup()
                        .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8)
                            .addComponent(jLabel4))
                        .addGap(32, 32, 32)
                        .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSourcePortNo, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSourceHostname, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbSourceDbms, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlSourceLayout.createSequentialGroup()
                        .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(59, 59, 59)
                        .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnTestSourceConnection)
                            .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtSourceUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                                .addComponent(txtSourcePassword))
                            .addComponent(btnFetchSourceTables, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        pnlSourceLayout.setVerticalGroup(
            pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSourceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbSourceDbms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtSourcePortNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSourceLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(txtSourceHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSourceDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSourceUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSourcePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnTestSourceConnection)
                .addGap(18, 18, 18)
                .addComponent(btnFetchSourceTables)
                .addGap(109, 109, 109))
        );

        getContentPane().add(pnlSource, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 450, 380));

        pnlDestination.setBackground(new java.awt.Color(204, 255, 255));
        pnlDestination.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Destination DBMS");

        btnTestDestConnection.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnTestDestConnection.setText("Test Connection");
        btnTestDestConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestDestConnectionActionPerformed(evt);
            }
        });

        chkCreateDatabase.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chkCreateDatabase.setSelected(true);
        chkCreateDatabase.setText("Create Database if not exists");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("Port Number");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("Hostname");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setText("Username");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setText("Password");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel14.setText("Database name");

        cmbDestDbms.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbDestDbms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDestDbmsActionPerformed(evt);
            }
        });

        txtDestPortNo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtDestHostname.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtDestHostname.setText("localhost");

        txtDestUsername.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtDestUsername.setText("root");

        txtDestDatabaseName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtDestPassword.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtDestPassword.setText("elephant");

        javax.swing.GroupLayout pnlDestinationLayout = new javax.swing.GroupLayout(pnlDestination);
        pnlDestination.setLayout(pnlDestinationLayout);
        pnlDestinationLayout.setHorizontalGroup(
            pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDestinationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDestinationLayout.createSequentialGroup()
                        .addGroup(pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel14))
                        .addGap(18, 18, 18)
                        .addGroup(pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkCreateDatabase)
                            .addGroup(pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cmbDestDbms, 0, 247, Short.MAX_VALUE)
                                .addComponent(txtDestPortNo)
                                .addComponent(txtDestHostname))
                            .addComponent(btnTestDestConnection)
                            .addComponent(txtDestDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlDestinationLayout.createSequentialGroup()
                        .addGroup(pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12))
                        .addGap(88, 88, 88)
                        .addGroup(pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDestUsername)
                            .addComponent(txtDestPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        pnlDestinationLayout.setVerticalGroup(
            pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDestinationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbDestDbms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDestinationLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel10))
                    .addGroup(pnlDestinationLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtDestPortNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(txtDestHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDestDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDestUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDestinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtDestPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(chkCreateDatabase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTestDestConnection)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        getContentPane().add(pnlDestination, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 0, 470, 380));

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton3.setText("Proceed to Migrate Data");
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 560, 250, 40));

        jList1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 350, 300));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Tables retrieved from Source Database");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Table to migrate to Destination Database");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 390, -1, -1));

        jList2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jScrollPane2.setViewportView(jList2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 420, 380, 300));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText(">");
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 470, 60, -1));

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setText(">>");
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 520, -1, -1));

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton5.setText("<<");
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 590, -1, -1));

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton6.setText("<");
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 640, 60, -1));

        chkDropTables.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chkDropTables.setSelected(true);
        chkDropTables.setText("Drop tables if exists with same name");
        getContentPane().add(chkDropTables, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 500, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTestSourceConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestSourceConnectionActionPerformed
        setSourceData();
        if(validateSourceData()){
            sourceConn = getConnection(sourceDbms, sourceHostname, sourcePortNo, sourceDatabasename, sourceUsername, sourcePassword);
            if(sourceConn != null){
                JOptionPane.showMessageDialog(this, "Source Database connection established successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        }
//        if(result == true){
//            
//        }
    }//GEN-LAST:event_btnTestSourceConnectionActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
//        System.out.println("formWindowActivated");
    }//GEN-LAST:event_formWindowActivated

    private void cmbSourceDbmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSourceDbmsActionPerformed
        String command = evt.getActionCommand();
//        System.out.println("Command : " + command);
//        System.out.println(cmbSourceDbms.getSelectedItem().toString());
        String dbms = cmbSourceDbms.getSelectedItem().toString();
        txtSourcePortNo.setText(String.valueOf(getDbmsDefaultPortNo(dbms)));
    }//GEN-LAST:event_cmbSourceDbmsActionPerformed

    private void btnFetchSourceTablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFetchSourceTablesActionPerformed
        setSourceData();
        if(validateSourceData()){
            sourceConn = getConnection(sourceDbms, sourceHostname, sourcePortNo, sourceDatabasename, sourceUsername, sourcePassword);
            if(sourceConn != null){
                fetchTables(sourceConn);
            }
        }
    }//GEN-LAST:event_btnFetchSourceTablesActionPerformed

    private void btnTestDestConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestDestConnectionActionPerformed
        setDestData();
        if(validateDestData()){
            destConn = getConnection(destDbms, destHostname, destPortNo, destDatabasename, destUsername, destPassword);
            if(destConn != null){
                JOptionPane.showMessageDialog(this, "Destination Database connection established successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnTestDestConnectionActionPerformed

    private void cmbDestDbmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDestDbmsActionPerformed
        String dbms = cmbDestDbms.getSelectedItem().toString();
        txtDestPortNo.setText(String.valueOf(getDbmsDefaultPortNo(dbms)));
    }//GEN-LAST:event_cmbDestDbmsActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try{
            if(sourceConn != null){
                sourceConn.close();
            }
            if(destConn != null){
                destConn.close();
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_formWindowClosing

    /* Custom Methods */
    private void fillDbmsCombobox(JComboBox cmb){
        for(int i=0, len = dbmsList.length; i < len; i++){
            cmb.addItem(dbmsList[i]);
        }
    }
    
    public void setSourceData(){
        try {
            sourceDbms = cmbSourceDbms.getSelectedItem().toString();
//            sourceDbmsIndex = cmbSourceDbms.getSelectedIndex();
//            System.out.println("Selected Dbms : " + dbmsList[sourceDbmsIndex]);
            try{
                sourcePortNo = Integer.parseInt(txtSourcePortNo.getText());
            }catch(Exception ex){
                sourcePortNo = 0;
                JOptionPane.showMessageDialog(this, "Please enter valid Port Number for Source Database.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            sourceHostname = txtSourceHostname.getText();
            sourceUsername = txtSourceUsername.getText();
            sourcePassword = txtSourcePassword.getText();
            sourceDatabasename = txtSourceDatabaseName.getText();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
    
    public void setDestData(){
        try {
            destDbms = cmbDestDbms.getSelectedItem().toString();
            try{
                destPortNo = Integer.parseInt(txtDestPortNo.getText());
            }catch(Exception ex){
                destPortNo = 0;
                JOptionPane.showMessageDialog(this, "Please enter valid Port Number for Destination Database.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            destHostname = txtDestHostname.getText();
            destUsername = txtDestUsername.getText();
            destPassword = txtDestPassword.getText();
            destDatabasename = txtDestDatabaseName.getText();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
    
    public boolean validateSourceData(){
        boolean result = true;
        if(cmbSourceDbms.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Please select Source DBMS.", "Warning", JOptionPane.WARNING_MESSAGE);
            cmbSourceDbms.requestFocus();
            result = false;
        }
        else if(txtSourcePortNo.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Source Database Port Number.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtSourcePortNo.requestFocus();
            result = false;
        }
        else if(txtSourceHostname.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Source Database Hostname of server.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtSourceHostname.requestFocus();
            result = false;
        }
        else if(txtSourceUsername.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Source Database Username.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtSourceUsername.requestFocus();
            result = false;
        }
        else if(txtSourcePassword.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Source Database User Password.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtSourcePassword.requestFocus();
            result = false;
        }
        else if(!cmbSourceDbms.getSelectedItem().toString().equals("Oracle")){
            if(txtSourceDatabaseName.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Please enter Source Database Name.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtSourcePassword.requestFocus();
                result = false;
            }
        }
        return result;
    }
    
    public boolean validateDestData(){
        boolean result = true;
        if(cmbDestDbms.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Please select Destination DBMS.", "Warning", JOptionPane.WARNING_MESSAGE);
            cmbDestDbms.requestFocus();
            result = false;
        }
        else if(txtDestPortNo.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Destination Database Port Number.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtDestPortNo.requestFocus();
            result = false;
        }
        else if(txtDestHostname.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Destination Database Hostname of server.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtDestHostname.requestFocus();
            result = false;
        }
        else if(txtDestUsername.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Destination Database Username.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtDestUsername.requestFocus();
            result = false;
        }
        else if(txtDestPassword.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Destination Database User Password.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtDestPassword.requestFocus();
            result = false;
        }
//        else if(!cmbDestDbms.getSelectedItem().toString().equals("Oracle")){
//            if(txtDestDatabaseName.getText().isEmpty()){
//                JOptionPane.showMessageDialog(this, "Please enter Destination Database Name.", "Warning", JOptionPane.WARNING_MESSAGE);
//                txtDestPassword.requestFocus();
//                result = false;
//            }
//        }
        return result;
    }
    
//    private boolean testSourceConnection (){
//        try {
//            setSourceData();
//            if(validateSourceData()){
//                String connString = getConnectionString(sourceDbms, sourceHostname, sourcePortNo, sourceDatabasename);
//                System.out.println("Connecting to database using :");
//                System.out.println("ConnString : " + connString);
//                System.out.println("Username : " + sourceUsername);
//                System.out.println("Password : " + sourcePassword);
//                sourceConn = DriverManager.getConnection(connString, sourceUsername, sourcePassword);
//                if(sourceConn != null){
////                    sourceStmt = sourceConn.prepareStatement("SELECT * FROM EMPLOYEE", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
////                    sourceResultSet = sourceStmt.executeQuery();
//                    JOptionPane.showMessageDialog(this, "Database connection established successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
//                }
//                return true;
//            }else{
//                return false;
//            }
//        } catch(Exception ex){
//            ex.printStackTrace();
//            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//            return false;
//        }
//    }
    
    private Connection getConnection (String dbms, String hostname, int portNo, String databaseName, String username, String password){
        try {
            String connString = getConnectionString(dbms, hostname, portNo, databaseName);
            System.out.println("Connecting to database using :");
            System.out.println("ConnString : " + connString);
            System.out.println("Username : " + username);
            System.out.println("Password : " + password);
            Connection conn = DriverManager.getConnection(connString, username, password);
            if(conn != null){
//                    sourceStmt = sourceConn.prepareStatement("SELECT * FROM EMPLOYEE", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
//                    sourceResultSet = sourceStmt.executeQuery();
//                JOptionPane.showMessageDialog(this, "Database connection established successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                return conn;
            }
            return null;
        } catch(Exception ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }
    
    private int getDbmsDefaultPortNo (String dbms){
        switch(dbms){
            case "Oracle":
                return Constants.ORACLE_PORT;
            case "MySQL":
                return Constants.MYSQL_PORT;
            case "Microsoft SQL Server":
                return Constants.MS_SQL_SERVER_PORT;
            default:
                return 0;
        }
    }
    
    private String getConnectionString(String dbms, String hostname, int portNumber, String databaseName){
        switch(dbms){
            case "Oracle":
                if(portNumber == 0){
                    portNumber = Constants.ORACLE_PORT;
                }
                return "jdbc:oracle:thin:@" + hostname + ":1521:XE";
            case "MySQL":
                if(portNumber == 0){
                    portNumber = Constants.MYSQL_PORT;
                }
                if(databaseName != null && !databaseName.isEmpty()){
//                    return "jdbc:mysql://" + hostname + ":" + portNumber + "/" + databaseName;
                    return "jdbc:mysql://" + hostname + ":" + portNumber + "/" + databaseName + "?useSSL=false";
                }else{
                    return "jdbc:mysql://" + hostname + ":" + portNumber;
                }
            case "Microsoft SQL Server":
                if(portNumber == 0){
                    portNumber = Constants.MS_SQL_SERVER_PORT;
                }
                if(databaseName != null && !databaseName.isEmpty()){
                    return "jdbc:sqlserver://" + hostname + ":" + portNumber + ";databaseName=" + databaseName + ";";
                }else{
                    return "jdbc:sqlserver://" + hostname + ":" + portNumber + ";";
                }
            default:
                return "";
        }
    }
    
    private void fetchTables(Connection conn){
        // TODO:
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MigrationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MigrationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MigrationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MigrationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MigrationFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFetchSourceTables;
    private javax.swing.JButton btnTestDestConnection;
    private javax.swing.JButton btnTestSourceConnection;
    private javax.swing.JCheckBox chkCreateDatabase;
    private javax.swing.JCheckBox chkDropTables;
    private javax.swing.JComboBox<String> cmbDestDbms;
    private javax.swing.JComboBox<String> cmbSourceDbms;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pnlDestination;
    private javax.swing.JPanel pnlSource;
    private javax.swing.JTextField txtDestDatabaseName;
    private javax.swing.JTextField txtDestHostname;
    private javax.swing.JPasswordField txtDestPassword;
    private javax.swing.JTextField txtDestPortNo;
    private javax.swing.JTextField txtDestUsername;
    private javax.swing.JTextField txtSourceDatabaseName;
    private javax.swing.JTextField txtSourceHostname;
    private javax.swing.JPasswordField txtSourcePassword;
    private javax.swing.JTextField txtSourcePortNo;
    private javax.swing.JTextField txtSourceUsername;
    // End of variables declaration//GEN-END:variables
}
